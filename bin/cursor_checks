#!/bin/bash

# Comprehensive checks for Rails project
# Run before committing code

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Store initial git status
initial_git_status=$(git status --porcelain)

# Function to check if files were modified during script execution
check_for_modifications() {
  current_git_status=$(git status --porcelain)
  if [ "$initial_git_status" != "$current_git_status" ]; then
    echo -e "\n${YELLOW}⚠️  Files were modified during the checks:${NC}"
    git status --porcelain
    echo -e "\n${GREEN}✅ These are likely rubocop auto-fixes that have been staged.${NC}"
    echo -e "${GREEN}They will be included in your commit with your curated message.${NC}"
  fi
}

# Individual check functions
run_security_check() {
  echo "🔒 Running Brakeman security scan..."
  if ! bin/brakeman --no-pager; then
    echo "❌ Brakeman found security issues. Aborting commit."
    return 1
  fi
  echo "✅ Security scan passed!"
}

run_importmap_check() {
  echo "📦 Running importmap audit..."
  if ! bin/importmap audit; then
    echo "❌ Importmap audit failed. Aborting commit."
    return 1
  fi
  echo "✅ Importmap audit passed!"
}

run_rails_tests() {
  echo "🧪 Running Rails tests..."
  if ! bin/rails db:test:prepare db:migrate test RAILS_ENV=test; then
    echo "❌ Rails tests failed. Aborting commit."
    return 1
  fi
  echo "✅ Rails tests passed!"
}

# Function to perform all checks
perform_cursor_checks() {
  if ! run_security_check; then
    return 1
  fi
  
  if ! run_importmap_check; then
    return 1
  fi
  
  if ! bin/rubocop_check; then
    return 1
  fi
  
  if ! run_rails_tests; then
    return 1
  fi
  
  return 0
}

# Run the checks
echo "🚀 Starting comprehensive project checks..."
if ! perform_cursor_checks; then
  echo "❌ Some checks failed. Please fix the issues before committing."
  exit 1
fi

echo
echo "✅ All checks passed!"

# Final check for any modifications (particularly from rubocop auto-fix)
check_for_modifications

exit 0 